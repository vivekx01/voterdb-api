{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "votedEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidatesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Election.sol"
  },
  "ast": {
    "absolutePath": "contracts/Election.sol",
    "exportedSymbols": {
      "Election": [
        116
      ]
    },
    "id": 117,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Election",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 116,
        "linearizedBaseContracts": [
          116
        ],
        "name": "Election",
        "nameLocation": "67:8:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Election.Candidate",
            "id": 8,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "138:2:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "133:7:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "133:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "157:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "150:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "150:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "176:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "171:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "171:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "113:9:0",
            "nodeType": "StructDefinition",
            "scope": 116,
            "src": "106:86:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a3ec138d",
            "id": 12,
            "mutability": "mutable",
            "name": "voters",
            "nameLocation": "268:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 116,
            "src": "236:38:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "244:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "236:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "255:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3477ee2e",
            "id": 17,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "362:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 116,
            "src": "328:44:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
              "typeString": "mapping(uint256 => struct Election.Candidate)"
            },
            "typeName": {
              "id": 16,
              "keyType": {
                "id": 13,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "336:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "328:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                "typeString": "mapping(uint256 => struct Election.Candidate)"
              },
              "valueType": {
                "id": 15,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 14,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8,
                  "src": "344:9:0"
                },
                "referencedDeclaration": 8,
                "src": "344:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$8_storage_ptr",
                  "typeString": "struct Election.Candidate"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2d35a8a2",
            "id": 19,
            "mutability": "mutable",
            "name": "candidatesCount",
            "nameLocation": "420:15:0",
            "nodeType": "VariableDeclaration",
            "scope": 116,
            "src": "408:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 18,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "408:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 23,
            "name": "votedEvent",
            "nameLocation": "467:10:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "501:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 23,
                  "src": "488:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "488:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "478:41:0"
            },
            "src": "461:59:0"
          },
          {
            "body": {
              "id": 46,
              "nodeType": "Block",
              "src": "540:192:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "43616e6469646174652031",
                        "id": 27,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "563:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        },
                        "value": "Candidate 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_41f9dcbd43e9b33194759b5a51b1df9864cdc2b2138ff106f03091eb79861f0c",
                          "typeString": "literal_string \"Candidate 1\""
                        }
                      ],
                      "id": 26,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "550:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "550:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "550:27:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "43616e6469646174652032",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "600:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        },
                        "value": "Candidate 2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_f1f17440f69835dafba5c9fd0e4caa6c780807a80f8d1745ec7af1408d6cca4a",
                          "typeString": "literal_string \"Candidate 2\""
                        }
                      ],
                      "id": 30,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "587:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "587:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "587:27:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "43616e6469646174652033",
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "637:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a8aeded82f6f4cfacfca479ad8228c6c3fad44ded07e33c87a6d754848e18955",
                          "typeString": "literal_string \"Candidate 3\""
                        },
                        "value": "Candidate 3"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_a8aeded82f6f4cfacfca479ad8228c6c3fad44ded07e33c87a6d754848e18955",
                          "typeString": "literal_string \"Candidate 3\""
                        }
                      ],
                      "id": 34,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "624:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "624:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "624:27:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "43616e6469646174652034",
                        "id": 39,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "674:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e8c2996ab62fdb4cbf2434875cb612867b7b27cfb5de9ee49e608694ef348fc0",
                          "typeString": "literal_string \"Candidate 4\""
                        },
                        "value": "Candidate 4"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e8c2996ab62fdb4cbf2434875cb612867b7b27cfb5de9ee49e608694ef348fc0",
                          "typeString": "literal_string \"Candidate 4\""
                        }
                      ],
                      "id": 38,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "661:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "661:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 41,
                  "nodeType": "ExpressionStatement",
                  "src": "661:27:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "43616e6469646174652035",
                        "id": 43,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "711:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6fc65e9191f7d41953b5baca59c048cb783012578be91474bf09c71e5008b879",
                          "typeString": "literal_string \"Candidate 5\""
                        },
                        "value": "Candidate 5"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_6fc65e9191f7d41953b5baca59c048cb783012578be91474bf09c71e5008b879",
                          "typeString": "literal_string \"Candidate 5\""
                        }
                      ],
                      "id": 42,
                      "name": "addCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "698:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "698:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "698:27:0"
                }
              ]
            },
            "id": 47,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "537:2:0"
            },
            "returnParameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "540:0:0"
            },
            "scope": 116,
            "src": "526:206:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 65,
              "nodeType": "Block",
              "src": "791:111:0",
              "statements": [
                {
                  "expression": {
                    "id": 53,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "801:18:0",
                    "subExpression": {
                      "id": 52,
                      "name": "candidatesCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "801:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 54,
                  "nodeType": "ExpressionStatement",
                  "src": "801:18:0"
                },
                {
                  "expression": {
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 55,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17,
                        "src": "829:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                          "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                        }
                      },
                      "id": 57,
                      "indexExpression": {
                        "id": 56,
                        "name": "candidatesCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "840:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "829:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_storage",
                        "typeString": "struct Election.Candidate storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 59,
                          "name": "candidatesCount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "869:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 60,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 49,
                          "src": "886:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        {
                          "hexValue": "30",
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "893:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 58,
                        "name": "Candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "859:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Candidate_$8_storage_ptr_$",
                          "typeString": "type(struct Election.Candidate storage pointer)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "859:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$8_memory_ptr",
                        "typeString": "struct Election.Candidate memory"
                      }
                    },
                    "src": "829:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$8_storage",
                      "typeString": "struct Election.Candidate storage ref"
                    }
                  },
                  "id": 64,
                  "nodeType": "ExpressionStatement",
                  "src": "829:66:0"
                }
              ]
            },
            "id": 66,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addCandidate",
            "nameLocation": "747:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "775:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 66,
                  "src": "761:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 48,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "761:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "760:22:0"
            },
            "returnParameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "791:0:0"
            },
            "scope": 116,
            "src": "738:164:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 73,
              "nodeType": "Block",
              "src": "968:39:0",
              "statements": [
                {
                  "expression": {
                    "id": 71,
                    "name": "candidatesCount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19,
                    "src": "985:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 70,
                  "id": 72,
                  "nodeType": "Return",
                  "src": "978:22:0"
                }
              ]
            },
            "functionSelector": "30a56347",
            "id": 74,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidateCount",
            "nameLocation": "917:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 67,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "934:2:0"
            },
            "returnParameters": {
              "id": 70,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 74,
                  "src": "960:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 68,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "959:9:0"
            },
            "scope": 116,
            "src": "908:99:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 114,
              "nodeType": "Block",
              "src": "1054:436:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 84,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1122:19:0",
                        "subExpression": {
                          "baseExpression": {
                            "id": 80,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "1123:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 83,
                          "indexExpression": {
                            "expression": {
                              "id": 81,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1130:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 82,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1130:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1123:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 79,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1114:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 85,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1114:28:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 86,
                  "nodeType": "ExpressionStatement",
                  "src": "1114:28:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 94,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 88,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 76,
                            "src": "1198:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 89,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1213:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1198:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 91,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 76,
                            "src": "1218:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 92,
                            "name": "candidatesCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "1234:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1218:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1198:51:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 87,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1190:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 95,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1190:60:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 96,
                  "nodeType": "ExpressionStatement",
                  "src": "1190:60:0"
                },
                {
                  "expression": {
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 97,
                        "name": "voters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "1300:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 100,
                      "indexExpression": {
                        "expression": {
                          "id": 98,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1307:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 99,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1307:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1300:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1321:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1300:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1300:25:0"
                },
                {
                  "expression": {
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "1375:37:0",
                    "subExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 104,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17,
                          "src": "1375:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Candidate_$8_storage_$",
                            "typeString": "mapping(uint256 => struct Election.Candidate storage ref)"
                          }
                        },
                        "id": 106,
                        "indexExpression": {
                          "id": 105,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "1386:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1375:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$8_storage",
                          "typeString": "struct Election.Candidate storage ref"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "1375:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1375:37:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 111,
                        "name": "_candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "1470:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 110,
                      "name": "votedEvent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "1459:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1459:24:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 113,
                  "nodeType": "EmitStatement",
                  "src": "1454:29:0"
                }
              ]
            },
            "functionSelector": "0121b93f",
            "id": 115,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "vote",
            "nameLocation": "1022:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 77,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "1033:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 115,
                  "src": "1028:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1028:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1027:19:0"
            },
            "returnParameters": {
              "id": 78,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1054:0:0"
            },
            "scope": 116,
            "src": "1013:477:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 117,
        "src": "58:1436:0",
        "usedErrors": []
      }
    ],
    "src": "32:1462:0"
  },
  "bytecode": "608060405234801561001057600080fd5b5060408051808201909152600b81526a43616e646964617465203160a81b602082015261003c906100ed565b60408051808201909152600b81526a21b0b73234b230ba32901960a91b6020820152610067906100ed565b60408051808201909152600b81526a43616e646964617465203360a81b6020820152610092906100ed565b60408051808201909152600b81526a10d85b991a59185d19480d60aa1b60208201526100bd906100ed565b60408051808201909152600b81526a43616e646964617465203560a81b60208201526100e8906100ed565b610259565b600280549060006100fd836101f5565b9091555050604080516060810182526002548082526020808301858152600084860181905292835260018083529490922083518155915180519394929361014b93850192919091019061015c565b506040820151816002015590505050565b8280546101689061021e565b90600052602060002090601f01602090048101928261018a57600085556101d0565b82601f106101a357805160ff19168380011785556101d0565b828001600101855582156101d0579182015b828111156101d05782518255916020019190600101906101b5565b506101dc9291506101e0565b5090565b5b808211156101dc57600081556001016101e1565b600060001982141561021757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061023257607f821691505b6020821081141561025357634e487b7160e01b600052602260045260246000fd5b50919050565b61037c806102686000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630121b93f1461005c5780632d35a8a21461007157806330a563471461008d5780633477ee2e14610095578063a3ec138d146100b7575b600080fd5b61006f61006a366004610234565b6100ea565b005b61007a60025481565b6040519081526020015b60405180910390f35b60025461007a565b6100a86100a3366004610234565b61018a565b6040516100849392919061024d565b6100da6100c53660046102b2565b60006020819052908152604090205460ff1681565b6040519015158152602001610084565b3360009081526020819052604090205460ff161561010757600080fd5b60008111801561011957506002548111155b61012257600080fd5b33600090815260208181526040808320805460ff191660019081179091558484529091528120600201805491610157836102e2565b909155505060405181907ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1690600090a250565b6001602081905260009182526040909120805491810180546101ab9061030b565b80601f01602080910402602001604051908101604052809291908181526020018280546101d79061030b565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b5050505050908060020154905083565b60006020828403121561024657600080fd5b5035919050565b83815260006020606081840152845180606085015260005b8181101561028157868101830151858201608001528201610265565b81811115610293576000608083870101525b5060408401949094525050601f91909101601f19160160800192915050565b6000602082840312156102c457600080fd5b81356001600160a01b03811681146102db57600080fd5b9392505050565b600060001982141561030457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061031f57607f821691505b6020821081141561034057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220e744f7e7be132d0ca7cd29b3dd534f3cfce61d40caf8704132d1c59fcb6442e064736f6c634300080a0033",
  "bytecodeSha1": "67b1194e333a353dc616c1141b72196a78408e42",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "Election",
  "coverageMap": {
    "branches": {
      "0": {
        "Election.vote": {
          "6": [
            1122,
            1141,
            true
          ],
          "7": [
            1198,
            1214,
            false
          ],
          "8": [
            1218,
            1249,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Election.getCandidateCount": {
          "0": [
            978,
            1000
          ]
        },
        "Election.vote": {
          "1": [
            1114,
            1142
          ],
          "2": [
            1190,
            1250
          ],
          "3": [
            1300,
            1325
          ],
          "4": [
            1375,
            1412
          ],
          "5": [
            1454,
            1483
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c80630121b93f1461005c5780632d35a8a21461007157806330a563471461008d5780633477ee2e14610095578063a3ec138d146100b7575b600080fd5b61006f61006a366004610234565b6100ea565b005b61007a60025481565b6040519081526020015b60405180910390f35b60025461007a565b6100a86100a3366004610234565b61018a565b6040516100849392919061024d565b6100da6100c53660046102b2565b60006020819052908152604090205460ff1681565b6040519015158152602001610084565b3360009081526020819052604090205460ff161561010757600080fd5b60008111801561011957506002548111155b61012257600080fd5b33600090815260208181526040808320805460ff191660019081179091558484529091528120600201805491610157836102e2565b909155505060405181907ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1690600090a250565b6001602081905260009182526040909120805491810180546101ab9061030b565b80601f01602080910402602001604051908101604052809291908181526020018280546101d79061030b565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b5050505050908060020154905083565b60006020828403121561024657600080fd5b5035919050565b83815260006020606081840152845180606085015260005b8181101561028157868101830151858201608001528201610265565b81811115610293576000608083870101525b5060408401949094525050601f91909101601f19160160800192915050565b6000602082840312156102c457600080fd5b81356001600160a01b03811681146102db57600080fd5b9392505050565b600060001982141561030457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061031f57607f821691505b6020821081141561034057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220e744f7e7be132d0ca7cd29b3dd534f3cfce61d40caf8704132d1c59fcb6442e064736f6c634300080a0033",
  "deployedSourceMap": "58:1436:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1013:477;;;;;;:::i;:::-;;:::i;:::-;;408:27;;;;;;;;;345:25:1;;;333:2;318:18;408:27:0;;;;;;;;908:99;985:15;;908:99;;328:44;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;236:38::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1584:14:1;;1577:22;1559:41;;1547:2;1532:18;236:38:0;1419:187:1;1013:477:0;1130:10;1123:6;:18;;;;;;;;;;;;;1122:19;1114:28;;;;;;1213:1;1198:12;:16;:51;;;;;1234:15;;1218:12;:31;;1198:51;1190:60;;;;;;1307:10;1300:6;:18;;;;;;;;;;;:25;;-1:-1:-1;;1300:25:0;1321:4;1300:25;;;;;;1375:24;;;;;;;;:34;;:37;;;;;;:::i;:::-;;;;-1:-1:-1;;1459:24:0;;1470:12;;1459:24;;;;;1013:477;:::o;328:44::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;381:742::-;586:6;575:9;568:25;549:4;612:2;650;645;634:9;630:18;623:30;682:6;676:13;725:6;720:2;709:9;705:18;698:34;750:1;760:141;774:6;771:1;768:13;760:141;;;870:14;;;866:23;;860:30;835:17;;;854:3;831:27;824:67;789:10;;760:141;;;919:6;916:1;913:13;910:92;;;990:1;984:3;975:6;964:9;960:22;956:32;949:43;910:92;-1:-1:-1;1105:2:1;1090:18;;1083:34;;;;-1:-1:-1;;1063:2:1;1042:15;;;;-1:-1:-1;;1038:29:1;1023:45;1070:3;1019:55;;381:742;-1:-1:-1;;381:742:1:o;1128:286::-;1187:6;1240:2;1228:9;1219:7;1215:23;1211:32;1208:52;;;1256:1;1253;1246:12;1208:52;1282:23;;-1:-1:-1;;;;;1334:31:1;;1324:42;;1314:70;;1380:1;1377;1370:12;1314:70;1403:5;1128:286;-1:-1:-1;;;1128:286:1:o;1611:232::-;1650:3;-1:-1:-1;;1671:17:1;;1668:140;;;1730:10;1725:3;1721:20;1718:1;1711:31;1765:4;1762:1;1755:15;1793:4;1790:1;1783:15;1668:140;-1:-1:-1;1835:1:1;1824:13;;1611:232::o;1848:380::-;1927:1;1923:12;;;;1970;;;1991:61;;2045:4;2037:6;2033:17;2023:27;;1991:61;2098:2;2090:6;2087:14;2067:18;2064:38;2061:161;;;2144:10;2139:3;2135:20;2132:1;2125:31;2179:4;2176:1;2169:15;2207:4;2204:1;2197:15;2061:161;;1848:380;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    58,
    1494
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x121B93F EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x2D35A8A2 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x30A56347 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x3477EE2E EQ PUSH2 0x95 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0xB7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x234 JUMP JUMPDEST PUSH2 0xEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0x234 JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x84 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x24D JUMP JUMPDEST PUSH2 0xDA PUSH2 0xC5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x119 JUMPI POP PUSH1 0x2 SLOAD DUP2 GT ISZERO JUMPDEST PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 PUSH2 0x157 DUP4 PUSH2 0x2E2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0xFFF3C900D938D21D0990D786E819F29B8D05C1EF587B462B939609625B684B16 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0x1AB SWAP1 PUSH2 0x30B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D7 SWAP1 PUSH2 0x30B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x224 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x224 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x207 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x60 DUP2 DUP5 ADD MSTORE DUP5 MLOAD DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x281 JUMPI DUP7 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x80 ADD MSTORE DUP3 ADD PUSH2 0x265 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 PUSH1 0x80 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x40 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD PUSH1 0x80 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x304 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x31F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x340 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 DIFFICULTY 0xF7 0xE7 0xBE SGT 0x2D 0xC 0xA7 0xCD 0x29 0xB3 0xDD MSTORE8 0x4F EXTCODECOPY 0xFC 0xE6 SAR BLOCKHASH 0xCA 0xF8 PUSH17 0x4132D1C59FCB6442E064736F6C63430008 EXP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x121B93F"
    },
    "38": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "EQ",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2D35A8A2"
    },
    "49": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x30A56347"
    },
    "60": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D"
    },
    "64": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "71": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "75": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "82": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB7"
    },
    "86": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "DUP1",
      "path": "0"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        58,
        1494
      ],
      "op": "REVERT",
      "path": "0"
    },
    "92": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "93": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "96": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A"
    },
    "99": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "100": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "102": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x234"
    },
    "105": {
      "fn": "Election.vote",
      "jump": "i",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMP",
      "path": "0"
    },
    "106": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "107": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEA"
    },
    "110": {
      "fn": "Election.vote",
      "jump": "i",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMP",
      "path": "0"
    },
    "111": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "112": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "STOP",
      "path": "0"
    },
    "113": {
      "offset": [
        408,
        435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "114": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "117": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "119": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "120": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "DUP2",
      "path": "0"
    },
    "121": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "JUMP",
      "path": "0"
    },
    "122": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "123": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "125": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "126": {
      "op": "SWAP1"
    },
    "127": {
      "op": "DUP2"
    },
    "128": {
      "op": "MSTORE"
    },
    "129": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "131": {
      "op": "ADD"
    },
    "132": {
      "offset": [
        408,
        435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "133": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "135": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "136": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "138": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "SUB",
      "path": "0"
    },
    "139": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "140": {
      "fn": "Election.vote",
      "offset": [
        408,
        435
      ],
      "op": "RETURN",
      "path": "0"
    },
    "141": {
      "fn": "Election.getCandidateCount",
      "offset": [
        908,
        1007
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "142": {
      "fn": "Election.getCandidateCount",
      "offset": [
        985,
        1000
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x2"
    },
    "144": {
      "fn": "Election.getCandidateCount",
      "offset": [
        985,
        1000
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "145": {
      "fn": "Election.getCandidateCount",
      "offset": [
        908,
        1007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "148": {
      "fn": "Election.getCandidateCount",
      "offset": [
        908,
        1007
      ],
      "op": "JUMP",
      "path": "0"
    },
    "149": {
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "150": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA8"
    },
    "153": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3"
    },
    "156": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "157": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "159": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x234"
    },
    "162": {
      "fn": "Election.getCandidateCount",
      "jump": "i",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "163": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "164": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A"
    },
    "167": {
      "fn": "Election.getCandidateCount",
      "jump": "i",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "168": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "169": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "171": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "172": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x84"
    },
    "175": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "176": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "177": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "178": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "179": {
      "fn": "Election.getCandidateCount",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24D"
    },
    "182": {
      "fn": "Election.getCandidateCount",
      "jump": "i",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "183": {
      "offset": [
        236,
        274
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "184": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "187": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC5"
    },
    "190": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "191": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "193": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B2"
    },
    "196": {
      "fn": "Election.getCandidateCount",
      "jump": "i",
      "offset": [
        236,
        274
      ],
      "op": "JUMP",
      "path": "0"
    },
    "197": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "198": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "200": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "202": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "DUP2",
      "path": "0"
    },
    "203": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "204": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "205": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "206": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "DUP2",
      "path": "0"
    },
    "207": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "208": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "210": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "211": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "212": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "213": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "215": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "AND",
      "path": "0"
    },
    "216": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "DUP2",
      "path": "0"
    },
    "217": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "JUMP",
      "path": "0"
    },
    "218": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "219": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "221": {
      "fn": "Election.getCandidateCount",
      "offset": [
        236,
        274
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "222": {
      "op": "SWAP1"
    },
    "223": {
      "op": "ISZERO"
    },
    "224": {
      "op": "ISZERO"
    },
    "225": {
      "op": "DUP2"
    },
    "226": {
      "op": "MSTORE"
    },
    "227": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "229": {
      "op": "ADD"
    },
    "230": {
      "offset": [
        236,
        274
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x84"
    },
    "233": {
      "op": "JUMP"
    },
    "234": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "235": {
      "fn": "Election.vote",
      "offset": [
        1130,
        1140
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 1
    },
    "236": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1129
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "238": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "239": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "DUP2",
      "path": "0"
    },
    "240": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "241": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "243": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "DUP2",
      "path": "0"
    },
    "244": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "245": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "246": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "248": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "249": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "250": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "251": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "253": {
      "fn": "Election.vote",
      "offset": [
        1123,
        1141
      ],
      "op": "AND",
      "path": "0"
    },
    "254": {
      "branch": 6,
      "fn": "Election.vote",
      "offset": [
        1122,
        1141
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "255": {
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x107"
    },
    "258": {
      "branch": 6,
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "259": {
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "261": {
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "DUP1",
      "path": "0"
    },
    "262": {
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "REVERT",
      "path": "0"
    },
    "263": {
      "fn": "Election.vote",
      "offset": [
        1114,
        1142
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "264": {
      "fn": "Election.vote",
      "offset": [
        1213,
        1214
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x0"
    },
    "266": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1210
      ],
      "op": "DUP2",
      "path": "0"
    },
    "267": {
      "branch": 7,
      "fn": "Election.vote",
      "offset": [
        1198,
        1214
      ],
      "op": "GT",
      "path": "0"
    },
    "268": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "DUP1",
      "path": "0"
    },
    "269": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "270": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x119"
    },
    "273": {
      "branch": 7,
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "274": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "POP",
      "path": "0"
    },
    "275": {
      "fn": "Election.vote",
      "offset": [
        1234,
        1249
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "277": {
      "fn": "Election.vote",
      "offset": [
        1234,
        1249
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "278": {
      "fn": "Election.vote",
      "offset": [
        1218,
        1230
      ],
      "op": "DUP2",
      "path": "0"
    },
    "279": {
      "fn": "Election.vote",
      "offset": [
        1218,
        1249
      ],
      "op": "GT",
      "path": "0"
    },
    "280": {
      "branch": 8,
      "fn": "Election.vote",
      "offset": [
        1218,
        1249
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "281": {
      "fn": "Election.vote",
      "offset": [
        1198,
        1249
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "282": {
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122"
    },
    "285": {
      "branch": 8,
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "286": {
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "288": {
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "289": {
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "REVERT",
      "path": "0"
    },
    "290": {
      "fn": "Election.vote",
      "offset": [
        1190,
        1250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "291": {
      "fn": "Election.vote",
      "offset": [
        1307,
        1317
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 3
    },
    "292": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1306
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "294": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "295": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "DUP2",
      "path": "0"
    },
    "296": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "297": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "299": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "DUP2",
      "path": "0"
    },
    "300": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "DUP2",
      "path": "0"
    },
    "301": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "302": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "304": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "DUP1",
      "path": "0"
    },
    "305": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "DUP4",
      "path": "0"
    },
    "306": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1318
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "307": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "DUP1",
      "path": "0"
    },
    "308": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "309": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "311": {
      "op": "NOT"
    },
    "312": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "AND",
      "path": "0"
    },
    "313": {
      "fn": "Election.vote",
      "offset": [
        1321,
        1325
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "315": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "316": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "DUP2",
      "path": "0"
    },
    "317": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "OR",
      "path": "0"
    },
    "318": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "319": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "320": {
      "fn": "Election.vote",
      "offset": [
        1300,
        1325
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "321": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "DUP5",
      "path": "0",
      "statement": 4
    },
    "322": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "DUP5",
      "path": "0"
    },
    "323": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "324": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "325": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "326": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "327": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "DUP2",
      "path": "0"
    },
    "328": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1399
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "329": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "331": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1409
      ],
      "op": "ADD",
      "path": "0"
    },
    "332": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "DUP1",
      "path": "0"
    },
    "333": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "334": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "335": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x157"
    },
    "338": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "DUP4",
      "path": "0"
    },
    "339": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E2"
    },
    "342": {
      "fn": "Election.vote",
      "jump": "i",
      "offset": [
        1375,
        1412
      ],
      "op": "JUMP",
      "path": "0"
    },
    "343": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "344": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "345": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "346": {
      "fn": "Election.vote",
      "offset": [
        1375,
        1412
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "347": {
      "op": "POP"
    },
    "348": {
      "op": "POP"
    },
    "349": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x40"
    },
    "351": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "352": {
      "fn": "Election.vote",
      "offset": [
        1470,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "353": {
      "fn": "Election.vote",
      "offset": [
        1470,
        1482
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "354": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xFFF3C900D938D21D0990D786E819F29B8D05C1EF587B462B939609625B684B16"
    },
    "387": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "388": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "390": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "391": {
      "fn": "Election.vote",
      "offset": [
        1459,
        1483
      ],
      "op": "LOG2",
      "path": "0"
    },
    "392": {
      "fn": "Election.vote",
      "offset": [
        1013,
        1490
      ],
      "op": "POP",
      "path": "0"
    },
    "393": {
      "fn": "Election.vote",
      "jump": "o",
      "offset": [
        1013,
        1490
      ],
      "op": "JUMP",
      "path": "0"
    },
    "394": {
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "395": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "397": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "399": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "400": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "401": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "402": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "404": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "405": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "406": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "407": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "409": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "410": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "411": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "412": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "413": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "414": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "415": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "416": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "417": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "418": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "419": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AB"
    },
    "422": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "423": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x30B"
    },
    "426": {
      "fn": "Election.vote",
      "jump": "i",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "427": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "428": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "429": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "431": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "432": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "434": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "435": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "436": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DIV",
      "path": "0"
    },
    "437": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MUL",
      "path": "0"
    },
    "438": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "440": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "441": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "443": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "444": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "445": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "446": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "447": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "449": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "450": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "451": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "452": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "453": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "454": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "455": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "456": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "457": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "459": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "460": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "461": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "462": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "463": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D7"
    },
    "466": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "467": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x30B"
    },
    "470": {
      "fn": "Election.vote",
      "jump": "i",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "471": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "472": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "473": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "474": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x224"
    },
    "477": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "478": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "479": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "481": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "LT",
      "path": "0"
    },
    "482": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F9"
    },
    "485": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "486": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "489": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "490": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP4",
      "path": "0"
    },
    "491": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "492": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DIV",
      "path": "0"
    },
    "493": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MUL",
      "path": "0"
    },
    "494": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP4",
      "path": "0"
    },
    "495": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "496": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "497": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "499": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "500": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "501": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x224"
    },
    "504": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "505": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "506": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "507": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "508": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "509": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "510": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "512": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "513": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "515": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "517": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "518": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "519": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "520": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "521": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "522": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP2",
      "path": "0"
    },
    "523": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "524": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "525": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "527": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "528": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "529": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "531": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "532": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "533": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP4",
      "path": "0"
    },
    "534": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "GT",
      "path": "0"
    },
    "535": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x207"
    },
    "538": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "539": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "540": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "541": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SUB",
      "path": "0"
    },
    "542": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "544": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "AND",
      "path": "0"
    },
    "545": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "546": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "547": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "548": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "549": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "550": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "551": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "552": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "553": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "554": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "555": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP1",
      "path": "0"
    },
    "556": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "558": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "ADD",
      "path": "0"
    },
    "559": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "560": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "561": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "POP",
      "path": "0"
    },
    "562": {
      "fn": "Election.vote",
      "offset": [
        328,
        372
      ],
      "op": "DUP4",
      "path": "0"
    },
    "563": {
      "fn": "Election.vote",
      "jump": "o",
      "offset": [
        328,
        372
      ],
      "op": "JUMP",
      "path": "0"
    },
    "564": {
      "op": "JUMPDEST"
    },
    "565": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "569": {
      "op": "DUP3"
    },
    "570": {
      "op": "DUP5"
    },
    "571": {
      "op": "SUB"
    },
    "572": {
      "op": "SLT"
    },
    "573": {
      "op": "ISZERO"
    },
    "574": {
      "op": "PUSH2",
      "value": "0x246"
    },
    "577": {
      "op": "JUMPI"
    },
    "578": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "580": {
      "op": "DUP1"
    },
    "581": {
      "op": "REVERT"
    },
    "582": {
      "op": "JUMPDEST"
    },
    "583": {
      "op": "POP"
    },
    "584": {
      "op": "CALLDATALOAD"
    },
    "585": {
      "op": "SWAP2"
    },
    "586": {
      "op": "SWAP1"
    },
    "587": {
      "op": "POP"
    },
    "588": {
      "jump": "o",
      "op": "JUMP"
    },
    "589": {
      "op": "JUMPDEST"
    },
    "590": {
      "op": "DUP4"
    },
    "591": {
      "op": "DUP2"
    },
    "592": {
      "op": "MSTORE"
    },
    "593": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "599": {
      "op": "DUP2"
    },
    "600": {
      "op": "DUP5"
    },
    "601": {
      "op": "ADD"
    },
    "602": {
      "op": "MSTORE"
    },
    "603": {
      "op": "DUP5"
    },
    "604": {
      "op": "MLOAD"
    },
    "605": {
      "op": "DUP1"
    },
    "606": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "608": {
      "op": "DUP6"
    },
    "609": {
      "op": "ADD"
    },
    "610": {
      "op": "MSTORE"
    },
    "611": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "613": {
      "op": "JUMPDEST"
    },
    "614": {
      "op": "DUP2"
    },
    "615": {
      "op": "DUP2"
    },
    "616": {
      "op": "LT"
    },
    "617": {
      "op": "ISZERO"
    },
    "618": {
      "op": "PUSH2",
      "value": "0x281"
    },
    "621": {
      "op": "JUMPI"
    },
    "622": {
      "op": "DUP7"
    },
    "623": {
      "op": "DUP2"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "DUP4"
    },
    "626": {
      "op": "ADD"
    },
    "627": {
      "op": "MLOAD"
    },
    "628": {
      "op": "DUP6"
    },
    "629": {
      "op": "DUP3"
    },
    "630": {
      "op": "ADD"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "633": {
      "op": "ADD"
    },
    "634": {
      "op": "MSTORE"
    },
    "635": {
      "op": "DUP3"
    },
    "636": {
      "op": "ADD"
    },
    "637": {
      "op": "PUSH2",
      "value": "0x265"
    },
    "640": {
      "op": "JUMP"
    },
    "641": {
      "op": "JUMPDEST"
    },
    "642": {
      "op": "DUP2"
    },
    "643": {
      "op": "DUP2"
    },
    "644": {
      "op": "GT"
    },
    "645": {
      "op": "ISZERO"
    },
    "646": {
      "op": "PUSH2",
      "value": "0x293"
    },
    "649": {
      "op": "JUMPI"
    },
    "650": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "652": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "654": {
      "op": "DUP4"
    },
    "655": {
      "op": "DUP8"
    },
    "656": {
      "op": "ADD"
    },
    "657": {
      "op": "ADD"
    },
    "658": {
      "op": "MSTORE"
    },
    "659": {
      "op": "JUMPDEST"
    },
    "660": {
      "op": "POP"
    },
    "661": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "663": {
      "op": "DUP5"
    },
    "664": {
      "op": "ADD"
    },
    "665": {
      "op": "SWAP5"
    },
    "666": {
      "op": "SWAP1"
    },
    "667": {
      "op": "SWAP5"
    },
    "668": {
      "op": "MSTORE"
    },
    "669": {
      "op": "POP"
    },
    "670": {
      "op": "POP"
    },
    "671": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "673": {
      "op": "SWAP2"
    },
    "674": {
      "op": "SWAP1"
    },
    "675": {
      "op": "SWAP2"
    },
    "676": {
      "op": "ADD"
    },
    "677": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "679": {
      "op": "NOT"
    },
    "680": {
      "op": "AND"
    },
    "681": {
      "op": "ADD"
    },
    "682": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "684": {
      "op": "ADD"
    },
    "685": {
      "op": "SWAP3"
    },
    "686": {
      "op": "SWAP2"
    },
    "687": {
      "op": "POP"
    },
    "688": {
      "op": "POP"
    },
    "689": {
      "jump": "o",
      "op": "JUMP"
    },
    "690": {
      "op": "JUMPDEST"
    },
    "691": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "693": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "695": {
      "op": "DUP3"
    },
    "696": {
      "op": "DUP5"
    },
    "697": {
      "op": "SUB"
    },
    "698": {
      "op": "SLT"
    },
    "699": {
      "op": "ISZERO"
    },
    "700": {
      "op": "PUSH2",
      "value": "0x2C4"
    },
    "703": {
      "op": "JUMPI"
    },
    "704": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "706": {
      "op": "DUP1"
    },
    "707": {
      "op": "REVERT"
    },
    "708": {
      "op": "JUMPDEST"
    },
    "709": {
      "op": "DUP2"
    },
    "710": {
      "op": "CALLDATALOAD"
    },
    "711": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "715": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "717": {
      "op": "SHL"
    },
    "718": {
      "op": "SUB"
    },
    "719": {
      "op": "DUP2"
    },
    "720": {
      "op": "AND"
    },
    "721": {
      "op": "DUP2"
    },
    "722": {
      "op": "EQ"
    },
    "723": {
      "op": "PUSH2",
      "value": "0x2DB"
    },
    "726": {
      "op": "JUMPI"
    },
    "727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "729": {
      "op": "DUP1"
    },
    "730": {
      "op": "REVERT"
    },
    "731": {
      "op": "JUMPDEST"
    },
    "732": {
      "op": "SWAP4"
    },
    "733": {
      "op": "SWAP3"
    },
    "734": {
      "op": "POP"
    },
    "735": {
      "op": "POP"
    },
    "736": {
      "op": "POP"
    },
    "737": {
      "jump": "o",
      "op": "JUMP"
    },
    "738": {
      "op": "JUMPDEST"
    },
    "739": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "741": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "743": {
      "op": "NOT"
    },
    "744": {
      "op": "DUP3"
    },
    "745": {
      "op": "EQ"
    },
    "746": {
      "op": "ISZERO"
    },
    "747": {
      "op": "PUSH2",
      "value": "0x304"
    },
    "750": {
      "op": "JUMPI"
    },
    "751": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "756": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "758": {
      "op": "SHL"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "761": {
      "op": "MSTORE"
    },
    "762": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "764": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "766": {
      "op": "MSTORE"
    },
    "767": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "769": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "771": {
      "op": "REVERT"
    },
    "772": {
      "op": "JUMPDEST"
    },
    "773": {
      "op": "POP"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "776": {
      "op": "ADD"
    },
    "777": {
      "op": "SWAP1"
    },
    "778": {
      "jump": "o",
      "op": "JUMP"
    },
    "779": {
      "op": "JUMPDEST"
    },
    "780": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "782": {
      "op": "DUP2"
    },
    "783": {
      "op": "DUP2"
    },
    "784": {
      "op": "SHR"
    },
    "785": {
      "op": "SWAP1"
    },
    "786": {
      "op": "DUP3"
    },
    "787": {
      "op": "AND"
    },
    "788": {
      "op": "DUP1"
    },
    "789": {
      "op": "PUSH2",
      "value": "0x31F"
    },
    "792": {
      "op": "JUMPI"
    },
    "793": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "795": {
      "op": "DUP3"
    },
    "796": {
      "op": "AND"
    },
    "797": {
      "op": "SWAP2"
    },
    "798": {
      "op": "POP"
    },
    "799": {
      "op": "JUMPDEST"
    },
    "800": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "802": {
      "op": "DUP3"
    },
    "803": {
      "op": "LT"
    },
    "804": {
      "op": "DUP2"
    },
    "805": {
      "op": "EQ"
    },
    "806": {
      "op": "ISZERO"
    },
    "807": {
      "op": "PUSH2",
      "value": "0x340"
    },
    "810": {
      "op": "JUMPI"
    },
    "811": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "816": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "818": {
      "op": "SHL"
    },
    "819": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "821": {
      "op": "MSTORE"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "826": {
      "op": "MSTORE"
    },
    "827": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "829": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "831": {
      "op": "REVERT"
    },
    "832": {
      "op": "JUMPDEST"
    },
    "833": {
      "op": "POP"
    },
    "834": {
      "op": "SWAP2"
    },
    "835": {
      "op": "SWAP1"
    },
    "836": {
      "op": "POP"
    },
    "837": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "e074c9f578cb742393ed0fa9c0977c23df336231",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4 ;\n\ncontract Election{\n    // Model a candidate\n    struct Candidate {\n        uint id;\n        string name;\n        uint voteCount;\n    }\n\n    // Store accounts that have voted\n    mapping(address => bool) public voters;\n\n    // Store Candidates\n    // Fetch Candidate\n    mapping(uint => Candidate) public candidates;\n    // Store Candidates Count\n    uint public candidatesCount;\n\n    // voted event\n    event votedEvent (\n        uint indexed _candidateId\n    );\n\n    constructor() {\n        addCandidate(\"Candidate 1\");\n        addCandidate(\"Candidate 2\");\n        addCandidate(\"Candidate 3\");\n        addCandidate(\"Candidate 4\");\n        addCandidate(\"Candidate 5\");\n    }\n\n    function addCandidate (string memory _name ) private {\n        candidatesCount ++;\n        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);\n    }\n\n    function getCandidateCount() view external returns (uint256){\n        return candidatesCount;\n    }\n\n    function vote (uint _candidateId) public {\n        // require that they haven't voted before\n        require(!voters[msg.sender]);\n\n        // require a valid candidate\n        require(_candidateId > 0 && _candidateId <= candidatesCount);\n\n        // record that voter has voted\n        voters[msg.sender] = true;\n\n        // update candidate vote Count\n        candidates[_candidateId].voteCount ++;\n\n        // trigger voted event\n        emit votedEvent(_candidateId);\n    }\n\n\n}",
  "sourceMap": "58:1436:0:-:0;;;526:206;;;;;;;;;-1:-1:-1;550:27:0;;;;;;;;;;;;-1:-1:-1;;;550:27:0;;;;;;:12;:27::i;:::-;587;;;;;;;;;;;;-1:-1:-1;;;587:27:0;;;;;;:12;:27::i;:::-;624;;;;;;;;;;;;-1:-1:-1;;;624:27:0;;;;;;:12;:27::i;:::-;661;;;;;;;;;;;;-1:-1:-1;;;661:27:0;;;;;;:12;:27::i;:::-;698;;;;;;;;;;;;-1:-1:-1;;;698:27:0;;;;;;:12;:27::i;:::-;58:1436;;738:164;801:15;:18;;;:15;:18;;;:::i;:::-;;;;-1:-1:-1;;859:36:0;;;;;;;;869:15;;859:36;;;;;;;;;;-1:-1:-1;859:36:0;;;;;;829:27;;;:10;:27;;;;;;;:66;;;;;;;;859:36;;829:27;;:66;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;738:164;:::o;58:1436::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;58:1436:0;;;-1:-1:-1;58:1436:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:232:1;53:3;-1:-1:-1;;74:17:1;;71:140;;;133:10;128:3;124:20;121:1;114:31;168:4;165:1;158:15;196:4;193:1;186:15;71:140;-1:-1:-1;238:1:1;227:13;;14:232::o;251:380::-;330:1;326:12;;;;373;;;394:61;;448:4;440:6;436:17;426:27;;394:61;501:2;493:6;490:14;470:18;467:38;464:161;;;547:10;542:3;538:20;535:1;528:31;582:4;579:1;572:15;610:4;607:1;600:15;464:161;;251:380;;;:::o;:::-;58:1436:0;;;;;;",
  "sourcePath": "contracts/Election.sol",
  "type": "contract"
}